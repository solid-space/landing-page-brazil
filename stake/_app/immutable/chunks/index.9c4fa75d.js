import{_ as m}from"./lodash.9552c526.js";import{c as b,j as v}from"./currencies.bbaf1c4b.js";import{d as r,w as u}from"./index.d67a6375.js";import{a as S}from"./index.9cf5ab9b.js";import{n as B}from"./index.ec15b88a.js";import{o as k}from"./index.36a91d4c.js";const p={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"UserBalances"},selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"user"},selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"}},{kind:"Field",name:{kind:"Name",value:"balances"},selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"available"},selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"amount"}},{kind:"Field",name:{kind:"Name",value:"currency"}}]}},{kind:"Field",name:{kind:"Name",value:"vault"},selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"amount"}},{kind:"Field",name:{kind:"Name",value:"currency"}}]}}]}}]}}]}}]},U=u(!1),y=(()=>{const l=m.mapValues(b,()=>({available:0,vault:0})),n=a=>m.fromPairs(a.map(i=>[i.available.currency,{available:i.available.amount,vault:i.vault.amount}])),t=(()=>{var a;{const o=k().readQuery(p);if((a=o==null?void 0:o.data)!=null&&a.user)return n(o.data.user.balances)}return l})(),e=u(t);return{...e,updateBalance:(a,i)=>{e.update(o=>({...o,[a]:i(o[a])}))},rawSet:a=>{e.set(n(a))},changeCurrencyAvailable:a=>{e.update(i=>({...i,[a.currency]:{...i[a.currency],available:a.amount}}))},changeCurrencyVault:a=>{e.update(i=>({...i,[a.currency]:{...i[a.currency],vault:a.amount}}))},fetch:async()=>{var c,d;const o=(d=(c=(await k().query(p,{},{requestPolicy:"network-only"}).toPromise()).data)==null?void 0:c.user)==null?void 0:d.balances;o&&e.update(f=>({...f,...n(o)}))}}})(),N=(()=>{const l=u({}),{update:n}=l;return{...l,updateDeduction:({balance:t,deduction:e,type:s="available"})=>{n(a=>{if(e.id in a){const i=a[e.id],o=("amount"in i?i.amount:0)+e.amount;a[e.id]={type:"available",...i,...e,amount:o}}return a}),y.updateBalance(t.currency,a=>({...a,[s]:t.amount}))},generate:t=>{const e=B();return n(s=>({...s,[e]:{type:"available",...t}})),e},remove:t=>{n(e=>m.omit(e,t))},removeByGame:t=>{n(e=>m.pickBy(e,s=>s.game!==t))}}})(),F=r(N,l=>({available:[],vault:[],...m.groupBy(m.map(l,(n,t)=>({id:t,...n})).filter(n=>"amount"in n&&"type"in n),n=>n.type)})),g=r(F,l=>m.mapValues(l,n=>m.reduce(n,(t,e)=>(e.currency in t?t[e.currency]+=e.amount:t[e.currency]=e.amount,t),{}))),w=r([y,g],([l,n])=>m.mapValues(l,(t,e)=>{var s,a;return{...t,vault:v(t.vault-(((s=n==null?void 0:n.vault)==null?void 0:s[e])||0),e),available:v(t.available-(((a=n==null?void 0:n.available)==null?void 0:a[e])||0),e)}})),j=r([w,S],([l,n])=>l[n].available),x=u(!1);export{j as a,w as b,N as d,x as i,U as l,y as r};
